{
    "installation": {
        "description": "To get started with Vite, you can install it using npm or yarn:",
        "code": "npm create vite@latest my-react-app -- --template react\ncd my-react-app\nnpm install\nnpm run dev"
    },
    "basicConfiguration": {
        "description": "The basic Vite configuration file (`vite.config.js`) is used to define how Vite behaves during development and build processes. Here's an example:",
        "code": "import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n})"
    },
    "plugins": {
        "description": "Vite supports a variety of plugins to extend its functionality. For React projects, the official React plugin is commonly used:",
        "code": "import react from '@vitejs/plugin-react'\n\nexport default defineConfig({\n  plugins: [react()],\n})",
        "additionalDescription": "You can add other plugins as needed. For example, to add support for Vue:",
        "additionalCode": "import vue from '@vitejs/plugin-vue'\n\nexport default defineConfig({\n  plugins: [vue()],\n})"
    },
    "serverConfiguration": {
        "description": "You can customize the development server settings in Vite. For example, to change the host and port:",
        "code": "export default defineConfig({\n  server: {\n    host: true,\n    port: 4000,\n  },\n})"
    },
    "buildOptions": {
        "description": "Vite offers various build options to optimize your production build. For example:",
        "code": "export default defineConfig({\n  build: {\n    target: 'esnext',\n    outDir: 'dist',\n    sourcemap: true,\n  },\n})"
    },
    "environmentVariables": {
        "description": "Vite supports environment variables that can be accessed within your application. To define them, create `.env` files:",
        "code": "// .env\nVITE_API_URL=https://api.example.com",
        "additionalDescription": "Access them in your code using `import.meta.env`:",
        "additionalCode": "const apiUrl = import.meta.env.VITE_API_URL"
    },
    "aliases": {
        "description": "Simplify import paths by defining aliases in your Vite configuration:",
        "code": "import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport path from 'path'\n\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      '@components': path.resolve(__dirname, 'src/components'),\n      '@assets': path.resolve(__dirname, 'src/assets'),\n    },\n  },\n})"
    },
    "optimization": {
        "description": "Optimize dependencies and build performance:",
        "code": "export default defineConfig({\n  optimizeDeps: {\n    include: ['some-package'],\n    exclude: ['another-package'],\n  },\n})"
    },
    "deployments": {
        "description": "Configure build settings suitable for your deployment environment:",
        "code": "export default defineConfig({\n  base: '/my-app/',\n  build: {\n    outDir: 'build',\n  },\n})"
    },
    "customPlugins": {
        "description": "Create and integrate custom plugins to extend Vite's functionality:",
        "code": "import { defineConfig } from 'vite'\n\nfunction myCustomPlugin() {\n  return {\n    name: 'my-custom-plugin',\n    transform(src, id) {\n      // Custom transformation logic\n      return src\n    },\n  }\n}\n\nexport default defineConfig({\n  plugins: [myCustomPlugin()],\n})"
    },
    "extConfigJSX": {
        "type": "extConfig",
        "title": "EXT config JavaScript XML",
        "description": "EXT Config is a Vite configuration designed to extend the core functionality of Vite, primarily through the integration of a custom console plugin. This plugin, currently named GEADEZIST, adds a custom server listening event, where it prints a unique message to the console once the server is up and running.",
        "code": "import { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\n\n// Console plugin\nconst PROJECT = () => {\n  return {\n    name: 'console-plugin',\n    configureServer(server) {\n      server.httpServer?.once('listening', () => {\n        console.log('\\n ODAMCHALAR, ðŸ«  ðŸ«  ðŸ˜´\\n PROJECT\\n');\n      });\n    },\n  };\n};\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react(), PROJECT()],\n  define: {\n    global: 'window',\n  },\n  server: {\n    host: '0.0.0.0',\n    port: 99,\n  },\n});",
        "language": "JavaScript",
        "icon": "javascript"
    },
    "extConfigTSX": {
        "type": "extConfig",
        "title": "EXT config for TypeScript",
        "description": "EXT Config is a Vite configuration designed to extend the core functionality of Vite, primarily through the integration of a custom console plugin. This plugin, currently named GEADEZIST, adds a custom server listening event, where it prints a unique message to the console once the server is up and running.",
        "note": "Note that an error occurs in this configuration in TypeScript, because in such a situation that type is not given in the console, you need to install the `@types/node` package",
        "code": "import { defineConfig, Plugin, ViteDevServer } from 'vite';\nimport react from '@vitejs/plugin-react';\n\nconst PROJECT = (): Plugin => {\n  return {\n    name: 'console-plugin',\n    configureServer(server: ViteDevServer) {\n      server.httpServer?.once('listening', () => {\n        console.log('\\n ODAMCHALAR, ðŸ«  ðŸ«  ðŸ˜´\\n PROJECT\\n');\n      });\n    },\n  };\n};\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react(), PROJECT()],\n  define: {\n    global: 'window',\n  },\n  server: {\n    host: '0.0.0.0',\n    port: 99\n  }\n});",
        "language": "TypeScript",
        "icon": "typescript"
    }
}